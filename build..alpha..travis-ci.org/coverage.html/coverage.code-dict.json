{"/home/travis/build/npmtest/node-npmtest-push.js/test.js":"/* istanbul instrument in package npmtest_push_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-push.js/lib.npmtest_push.js.js":"/* istanbul instrument in package npmtest_push_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_push_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_push_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-push.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-push.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_push_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_push_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_push_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_push_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_push_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_push_js.__dirname + '/lib.npmtest_push_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-push.js/node_modules/push.js/push.js":"/**\n * Push\n * =======\n * A compact, cross-browser solution for the JavaScript Notifications API\n *\n * Credits\n * -------\n * Tsvetan Tsvetkov (ttsvetko)\n * Alex Gibson (alexgibson)\n *\n * License\n * -------\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2015-2017 Tyler Nickerson\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * @preserve\n */\n\n(function (global, factory) {\n\n    'use strict';\n\n    /* Use AMD */\n    if (typeof define === 'function' && define.amd) {\n        define(function () {\n            return new (factory(global, global.document))();\n        });\n    }\n    /* Use CommonJS */\n    else if (typeof module !== 'undefined' && module.exports) {\n        module.exports = new (factory(global, global.document))();\n    }\n    /* Use Browser */\n    else {\n        global.Push = new (factory(global, global.document))();\n    }\n\n})(typeof window !== 'undefined' ? window : this, function (w, d) {\n\n    var Push = function () {\n\n        /**********************\n            Local Variables\n        /**********************/\n\n        var\n        self = this,\n        isUndefined   = function (obj) { return obj === undefined; },\n        isString   = function (obj) { return typeof obj === 'string' },\n        isFunction = function (obj) { return obj && {}.toString.call(obj) === '[object Function]'; },\n\n        /* ID to use for new notifications */\n        currentId = 0,\n\n        /* Message to show if there is no suport to Push Notifications */\n        incompatibilityErrorMessage = 'PushError: push.js is incompatible with browser.',\n\n        /* Map of open notifications */\n        notifications = {},\n\n        /* Testing variable for the last service worker path used */\n        lastWorkerPath = null,\n\n        /**********************\n            Helper Functions\n        /**********************/\n\n        /**\n         * Closes a notification\n         * @param {Notification} notification\n         * @return {Boolean} boolean denoting whether the operation was successful\n         */\n        closeNotification = function (id) {\n            var errored = false,\n                notification = notifications[id];\n\n            if (typeof notification !== 'undefined') {\n                /* Safari 6+, Chrome 23+ */\n                if (notification.close) {\n                    notification.close();\n                /* Legacy webkit browsers */\n                } else if (notification.cancel) {\n                    notification.cancel();\n                /* IE9+ */\n                } else if (w.external && w.external.msIsSiteMode) {\n                    w.external.msSiteModeClearIconOverlay();\n                } else {\n                    errored = true;\n                    throw new Error('Unable to close notification: unknown interface');\n                }\n\n                if (!errored) {\n                    return removeNotification(id);\n                }\n            }\n\n            return false;\n        },\n\n        /**\n         * Adds a notification to the global dictionary of notifications\n         * @param {Notification} notification\n         * @return {Integer} Dictionary key of the notification\n         */\n        addNotification = function (notification) {\n            var id = currentId;\n            notifications[id] = notification;\n            currentId++;\n            return id;\n        },\n\n        /**\n         * Removes a notification with the given ID\n         * @param  {Integer} id - Dictionary key/ID of the notification to remove\n         * @return {Boolean} boolean denoting success\n         */\n        removeNotification = function (id) {\n            var dict = {},\n                success = false,\n                key;\n\n            for (key in notifications) {\n                if (notifications.hasOwnProperty(key)) {\n                    if (key != id) {\n                        dict[key] = notifications[key];\n                    } else {\n                        // We're successful if we omit the given ID from the new array\n                        success = true;\n                    }\n                }\n            }\n            // Overwrite the current notifications dictionary with the filtered one\n            notifications = dict;\n            return success;\n        },\n\n        prepareNotification = function (id, options) {\n            var wrapper;\n\n            /* Wrapper used to get/close notification later on */\n            wrapper = {\n                get: function () {\n                    return notifications[id];\n                },\n\n                close: function () {\n                    closeNotification(id);\n                }\n            };\n\n            /* Autoclose timeout */\n            if (options.timeout) {\n                setTimeout(function () {\n                    wrapper.close();\n                }, options.timeout);\n            }\n\n            return wrapper;\n        },\n\n        /**\n         * Callback function for the 'create' method\n         * @return {void}\n         */\n        createCallback = function (title, options, resolve) {\n            var notification,\n                onClose;\n\n            /* Set empty settings if none are specified */\n            options = options || {};\n\n            /* Set the last service worker path for testing */\n            self.lastWorkerPath = options.serviceWorker || 'serviceWorker.js';\n\n            /* onClose event handler */\n            onClose = function (id) {\n                /* A bit redundant, but covers the cases when close() isn't explicitly called */\n                removeNotification(id);\n                if (isFunction(options.onClose)) {\n                    options.onClose.call(this, notification);\n                }\n            };\n\n            /* Safari 6+, Firefox 22+, Chrome 22+, Opera 25+ */\n            if (w.Notification) {\n                try {\n                    notification =  new w.Notification(\n                        title,\n                        {\n                            icon: (isString(options.icon) || isUndefined(options.icon)) ? options.icon : options.icon.x32,\n                            body: options.body,\n                            tag: options.tag,\n                            requireInteraction: options.requireInteraction,\n                            silent: options.silent\n                        }\n                    );\n                } catch (e) {\n                    if (w.navigator) {\n                        /* Register ServiceWorker using lastWorkerPath */\n                        w.navigator.serviceWorker.register(self.lastWorkerPath);\n                        w.navigator.serviceWorker.ready.then(function(registration) {\n                            var localData = {\n                                id: currentId,\n                                link: options.link,\n                                origin: document.location.href,\n                                onClick: (isFunction(options.onClick)) ? options.onClick.toString() : '',\n                                onClose: (isFunction(options.onClose)) ? options.onClose.toString() : ''\n                            };\n\n                            if (typeof options.data !== 'undefined' && options.data !== null)\n                                localData = Object.assign(localData, options.data);\n\n                            /* Show the notification */\n                            registration.showNotification(\n                                title,\n                                {\n                                    icon: options.icon,\n                                    body: options.body,\n                                    vibrate: options.vibrate,\n                                    tag: options.tag,\n                                    data: localData,\n                                    requireInteraction: options.requireInteraction\n                                }\n                            ).then(function() {\n                                var id;\n\n                                /* Find the most recent notification and add it to the global array */\n                                registration.getNotifications().then(function(notifications) {\n                                    id = addNotification(notifications[notifications.length - 1]);\n\n                                    /* Send an empty message so the ServiceWorker knows who the client is */\n                                    registration.active.postMessage('');\n\n                                    /* Listen for close requests from the ServiceWorker */\n                                    navigator.serviceWorker.addEventListener('message', function (event) {\n                                        var data = JSON.parse(event.data);\n\n                                        if (data.action === 'close' && Number.isInteger(data.id))\n                                            removeNotification(data.id);\n                                    });\n\n                                    resolve(prepareNotification(id, options));\n                                });\n                            });\n                        });\n                    }\n                }\n\n            /* Legacy webkit browsers */\n            } else if (w.webkitNotifications) {\n\n                notification = w.webkitNotifications.createNotification(\n                    options.icon,\n                    title,\n                    options.body\n                );\n\n                notification.show();\n\n            /* Firefox Mobile */\n            } else if (navigator.mozNotification) {\n\n                notification = navigator.mozNotification.createNotification(\n                    title,\n                    options.body,\n                    options.icon\n                );\n\n                notification.show();\n\n            /* IE9+ */\n            } else if (w.external && w.external.msIsSiteMode()) {\n\n                //Clear any previous notifications\n                w.external.msSiteModeClearIconOverlay();\n                w.external.msSiteModeSetIconOverlay(\n                    ((isString(options.icon) || isUndefined(options.icon))\n                    ? options.icon\n                    : options.icon.x16), title\n                );\n                w.external.msSiteModeActivate();\n\n                notification = {};\n            } else {\n                throw new Error('Unable to create notification: unknown interface');\n            }\n\n            if (typeof(notification) !== 'undefined') {\n                var id = addNotification(notification),\n                    wrapper = prepareNotification(id, options);\n\n                /* Notification callbacks */\n                if (isFunction(options.onShow))\n                    notification.addEventListener('show', options.onShow);\n\n                if (isFunction(options.onError))\n                    notification.addEventListener('error', options.onError);\n\n                if (isFunction(options.onClick))\n                    notification.addEventListener('click', options.onClick);\n\n                notification.addEventListener('close', function() {\n                    onClose(id);\n                });\n\n                notification.addEventListener('cancel', function() {\n                    onClose(id);\n                });\n\n                /* Return the wrapper so the user can call close() */\n                resolve(wrapper);\n            }\n\n            resolve({}); // By default, pass an empty wrapper\n        },\n\n        /**\n         * Permission types\n         * @enum {String}\n         */\n        Permission = {\n            DEFAULT: 'default',\n            GRANTED: 'granted',\n            DENIED: 'denied'\n        },\n\n        Permissions = [Permission.GRANTED, Permission.DEFAULT, Permission.DENIED];\n\n        /* Allow enums to be accessible from Push object */\n        self.Permission = Permission;\n\n        /*****************\n            Permissions\n        /*****************/\n\n        /**\n         * Requests permission for desktop notifications\n         * @param {Function} callback - Function to execute once permission is granted\n         * @return {void}\n         */\n        self.Permission.request = function (onGranted, onDenied) {\n            var existing = self.Permission.get();\n\n            /* Return if Push not supported */\n            if (!self.isSupported) {\n                throw new Error(incompatibilityErrorMessage);\n            }\n\n            /* Default callback */\n            callback = function (result) {\n                switch (result) {\n\n                    case self.Permission.GRANTED:\n                        if (onGranted) onGranted();\n                        break;\n\n                    case self.Permission.DENIED:\n                        if (onDenied) onDenied();\n                        break;\n\n                }\n\n            };\n\n            /* Permissions already set */\n            if (existing !== self.Permission.DEFAULT) {\n                callback(existing);\n            }\n            /* Safari 6+, Chrome 23+ */\n            else if (w.Notification && w.Notification.requestPermission) {\n                Notification.requestPermission(callback);\n            }\n            /* Legacy webkit browsers */\n            else if (w.webkitNotifications && w.webkitNotifications.checkPermission) {\n                w.webkitNotifications.requestPermission(callback);\n            } else {\n                throw new Error(incompatibilityErrorMessage);\n            }\n        };\n\n        /**\n         * Returns whether Push has been granted permission to run\n         * @return {Boolean}\n         */\n        self.Permission.has = function () {\n            return Permission.get() === Permission.GRANTED;\n        };\n\n        /**\n         * Gets the permission level\n         * @return {Permission} The permission level\n         */\n        self.Permission.get = function () {\n\n            var permission;\n\n            /* Return if Push not supported */\n            if (!self.isSupported) { throw new Error(incompatibilityErrorMessage); }\n\n            /* Safari 6+, Chrome 23+ */\n            if (w.Notification && w.Notification.permissionLevel) {\n                permission = w.Notification.permissionLevel;\n\n            /* Legacy webkit browsers */\n            } else if (w.webkitNotifications && w.webkitNotifications.checkPermission) {\n                permission = Permissions[w.webkitNotifications.checkPermission()];\n\n            /* Firefox 23+ */\n            } else if (w.Notification && w.Notification.permission) {\n                permission = w.Notification.permission;\n\n            /* Firefox Mobile */\n            } else if (navigator.mozNotification) {\n                permission = Permission.GRANTED;\n\n            /* IE9+ */\n            } else if (w.external && w.external.msIsSiteMode() !== undefined) {\n                permission = w.external.msIsSiteMode() ? Permission.GRANTED : Permission.DEFAULT;\n            } else {\n                throw new Error(incompatibilityErrorMessage);\n            }\n\n            return permission;\n\n        };\n\n        /*********************\n            Other Functions\n        /*********************/\n\n        /**\n         * Detects whether the user's browser supports notifications\n         * @return {Boolean}\n         */\n        self.isSupported = (function () {\n\n             var isSupported = false;\n\n             try {\n\n                 isSupported =\n\n                     /* Safari, Chrome */\n                     !!(w.Notification ||\n\n                     /* Chrome & ff-html5notifications plugin */\n                     w.webkitNotifications ||\n\n                     /* Firefox Mobile */\n                     navigator.mozNotification ||\n\n                     /* IE9+ */\n                     (w.external && w.external.msIsSiteMode() !== undefined));\n\n             } catch (e) {}\n\n             return isSupported;\n\n         })();\n\n         /**\n          * Creates and displays a new notification\n          * @param {Array} options\n          * @return {Promise}\n          */\n        self.create = function (title, options) {\n            var promiseCallback;\n\n            /* Fail if the browser is not supported */\n            if (!self.isSupported) {\n                throw new Error(incompatibilityErrorMessage);\n            }\n\n            /* Fail if no or an invalid title is provided */\n            if (!isString(title)) {\n                throw new Error('PushError: Title of notification must be a string');\n            }\n\n            /* Request permission if it isn't granted */\n            if (!self.Permission.has()) {\n                promiseCallback = function(resolve, reject) {\n                    self.Permission.request(function() {\n                        try {\n                            createCallback(title, options, resolve);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }, function() {\n                        reject(\"Permission request declined\");\n                    });\n                };\n            } else {\n                promiseCallback = function(resolve, reject) {\n                    try {\n                        createCallback(title, options, resolve);\n                    } catch (e) {\n                        reject(e);\n                    }\n                };\n            }\n\n            return new Promise(promiseCallback);\n        };\n\n        /**\n         * Returns the notification count\n         * @return {Integer} The notification count\n         */\n        self.count = function () {\n            var count = 0,\n                key;\n\n            for (key in notifications)\n                count++;\n\n            return count;\n        },\n\n        /**\n         * Internal function that returns the path of the last service worker used\n         * For testing purposes only\n         * @return {String} The service worker path\n         */\n        self.__lastWorkerPath = function () {\n            return self.lastWorkerPath;\n        },\n\n        /**\n         * Closes a notification with the given tag\n         * @param {String} tag - Tag of the notification to close\n         * @return {Boolean} boolean denoting success\n         */\n        self.close = function (tag) {\n            var key;\n            for (key in notifications) {\n                notification = notifications[key];\n                /* Run only if the tags match */\n                if (notification.tag === tag) {\n                    /* Call the notification's close() method */\n                    return closeNotification(key);\n                }\n            }\n        };\n\n        /**\n         * Clears all notifications\n         * @return {void}\n         */\n        self.clear = function () {\n            var success = true;\n\n            for (key in notifications)\n                success = success && closeNotification(key);\n\n            return success;\n        };\n    };\n\n    return Push;\n\n});\n","/home/travis/build/npmtest/node-npmtest-push.js/node_modules/push.js/karma.conf.js":"// Karma configuration\n// Generated on Tue Jul 21 2015 22:34:30 GMT-0400 (EDT)\n\nmodule.exports = function(config) {\n    config.set({\n\n        // base path that will be used to resolve all patterns (eg. files, exclude)\n        basePath: '',\n\n        coverageReporter: {\n            // specify a common output directory\n            dir: 'coverage',\n            reporters: [{\n                type: 'lcov',\n                subdir: '.'\n            }]\n        },\n\n        // frameworks to use\n        // available frameworks: https://npmjs.org/browse/keyword/karma-adapter\n        frameworks: ['jasmine'],\n\n        plugins: [\n            'karma-jasmine',\n            'karma-firefox-launcher',\n            'karma-mocha-reporter',\n            'karma-coverage'\n        ],\n\n        // list of files / patterns to load in the browser\n        files: [\n            'push.js',\n            'push_tests.js'\n        ],\n\n        // preprocess matching files before serving them to the browser\n        // available preprocessors: https://npmjs.org/browse/keyword/karma-preprocessor\n        preprocessors: {\n            'push.js': ['coverage']\n        },\n\n\n        // test results reporter to use\n        // possible values: 'dots', 'progress'\n        // available reporters: https://npmjs.org/browse/keyword/karma-reporter\n        reporters: ['mocha', 'coverage'],\n\n\n        // web server port\n        port: 9876,\n\n\n        // enable / disable colors in the output (reporters and logs)\n        colors: true,\n\n\n        // level of logging\n        // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n        logLevel: config.LOG_INFO,\n\n\n        // enable / disable watching file and executing tests whenever any file changes\n        autoWatch: false,\n\n\n        // start these browsers\n        // available browser launchers: https://npmjs.org/browse/keyword/karma-launcher\n        browsers: ['Firefox'],\n\n\n        // Continuous Integration mode\n        // if true, Karma captures browsers, runs the tests and exits\n        singleRun: true\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-push.js/node_modules/push.js/serviceWorker.js":"var isFunction = function (obj) { return obj && {}.toString.call(obj) === '[object Function]'; },\n\nrunFunctionString = function(funcStr) {\n    if (funcStr.trim().length > 0) {\n        eval('var func = ' + funcStr);\n        if (isFunction(func))\n            func();\n    }\n};\n\nself.addEventListener('message', function(event) {\n    self.client = event.source;\n});\n\nself.onnotificationclose = function (event) {\n    runFunctionString(event.notification.data.onClose);\n\n    /* Tell Push to execute close callback */\n    self.client.postMessage(JSON.stringify({\n        id: event.notification.data.id,\n        action: 'close'\n    }));\n};\n\nself.onnotificationclick = function (event) {\n    var link, origin, href;\n\n    runFunctionString(event.notification.data.onClick);\n\n    if (typeof event.notification.data.link !== 'undefined' && event.notification.data.link !== null) {\n        origin = event.notification.data.origin;\n        link = event.notification.data.link;\n        href = origin.substring(0, origin.indexOf('/', 8)) + '/';\n\n        event.notification.close();\n\n        // This looks to see if the current is already open and focuses if it is\n        event.waitUntil(clients.matchAll({\n            type: \"window\"\n        }).then(function (clientList) {\n            var client, full_url;\n\n            for (var i = 0; i < clientList.length; i++) {\n                client = clientList[i];\n                full_url = href + link;\n\n                if (full_url[full_url.length - 1] !== '/' && client.url[client.url.length - 1] == '/')\n                    full_url += '/';\n\n                if ((client.url == full_url) && ('focus' in client))\n                    return client.focus();\n            }\n\n            if (clients.openWindow)\n                return clients.openWindow('/' + link);\n        }));\n    }\n};\n"}